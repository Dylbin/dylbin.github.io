
//
// Streamer-iOS-Shared.xcconfig
//
// Generated by BuildSettingExtractor on 16.09.22
// https://buildsettingextractor.com
//

// Primary App Icon Set Name
// 
// Name of an app icon set for the target's default app icon. The contents will be merged
// into the `Info.plist`.

ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon



// Global Accent Color Name
// 
// The name of a color resource to use as a the target's accent color, used as the
// default tint color on iOS and watchOS, and accent color on macOS.

ASSETCATALOG_COMPILER_GLOBAL_ACCENT_COLOR_NAME = 



// C++ Language Dialect
// 
// Choose a standard or non-standard C++ language dialect. Options include:
// 
// * C++98: Accept ISO C++ 1998 with amendments, but not GNU extensions. [-std=c++98]
// * GNU++98: Accept ISO C++ 1998 with amendments and GNU extensions. [-std=gnu++98]
// * C++11: Accept the ISO C++ 2011 standard with amendments, but not GNU extensions.
// [-std=c++11]
// * GNU++11: Accept the ISO C++ 2011 standard with amendments and GNU extensions.
// [-std=gnu++11]
// * C++14: Accept the ISO C++ 2014 standard with amendments, but not GNU extensions.
// [-std=c++14]
// * GNU++14: Accept the ISO C++ 2014 standard with amendments and GNU extensions.
// [-std=gnu++14]
// * C++17: Accept the ISO C++ 2017 standard with amendments, but not GNU extensions.
// [-std=c++17]
// * GNU++17: Accept the ISO C++ 2017 standard with amendments and GNU extensions.
// [-std=gnu++17]
// * Compiler Default: Tells the compiler to use its default C++ language dialect. This
// is normally the best choice unless you have specific needs. (Currently equivalent to
// GNU++98.)

CLANG_CXX_LANGUAGE_STANDARD = gnu++17



// Code Signing Entitlements
// 
// The path to a file specifying code-signing entitlements.

CODE_SIGN_ENTITLEMENTS = Streamer-iOS/Streamer-iOS.entitlements



// Code Signing Identity
// 
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.

CODE_SIGN_IDENTITY = Apple Development



// Code Signing Style
// 
// This setting specifies the method used to acquire and locate signing assets. Choose
// `Automatic` to let Xcode automatically create and update profiles, app IDs, and
// certificates. Choose `Manual` to create and update these yourself on the developer
// website.

CODE_SIGN_STYLE = Automatic



// Current Project Version
// 
// This setting defines the current version of the project. The value must be a integer
// or floating point number, such as `57` or `365.8`.

CURRENT_PROJECT_VERSION = 92



// Development Team
// 
// The team ID of a development team to use for signing certificates and provisioning
// profiles.

DEVELOPMENT_TEAM = Z7X5ZATDX2



// Embed Asset Packs In Product Bundle
// 
// Embed all the built asset packs inside the product bundle. Since this negates the
// performance benefits of the On Demand Resources feature, it is only useful for testing
// purposes when it isn't practical to use an asset pack server.

EMBED_ASSET_PACKS_IN_PRODUCT_BUNDLE = YES



// Enable Bitcode
// 
// Activating this setting indicates that the target or project should generate bitcode
// during compilation for platforms and architectures that support it. For Archive
// builds, bitcode will be generated in the linked binary for submission to the App
// Store. For other builds, the compiler and linker will check whether the code complies
// with the requirements for bitcode generation, but will not generate actual bitcode.

ENABLE_BITCODE = NO



// Generate Info.plist File
// 
// If enabled, automatically generate an Info.plist file with content from build
// settings.

GENERATE_INFOPLIST_FILE = YES



// Info.plist File
// 
// The project-relative path to the property list file that contains the `Info.plist`
// information used by bundles. For details on information property list files, see
// [Information Property
// List](https://developer.apple.com/documentation/bundleresources/information_property_list).

INFOPLIST_FILE = Streamer-iOS/Info.plist



// Privacy - Bluetooth Always Usage Description
// 
// A message that tells the user why the app needs access to Bluetooth.

INFOPLIST_KEY_NSBluetoothAlwaysUsageDescription = Streamer uses the local network to discover Cast-enabled devices on your WiFi network.



// Privacy - Camera Usage Description
// 
// A message that tells the user why the app is requesting access to the device’s camera.

INFOPLIST_KEY_NSCameraUsageDescription = Some ad content may access camera to take picture.



// Privacy - Local Network Usage Description
// 
// A message that tells the user why the app is requesting access to the local network.

INFOPLIST_KEY_NSLocalNetworkUsageDescription = ${PRODUCT_NAME} uses the local network to discover Cast-enabled devices on your WiFi network.



// Privacy - Motion Usage Description
// 
// A message that tells the user why the app is requesting access to the device’s motion
// data.

INFOPLIST_KEY_NSMotionUsageDescription = Some ad content may require access to accelerometer for interactive ad experience.



// Privacy - Photo Library Usage Description
// 
// A message that tells the user why the app is requesting access to the user’s photo
// library.

INFOPLIST_KEY_NSPhotoLibraryUsageDescription = Some ad content may require access to the photo library.



// Privacy - Tracking Usage Description
// 
// A message that informs the user why an app is requesting permission to use data for
// tracking the user or the device.

INFOPLIST_KEY_NSUserTrackingUsageDescription = App would like to access IDFA for tracking purpose



// Supports Indirect Events
// 
// A Boolean value indicating that the app generally supports indirect input mechanisms.

INFOPLIST_KEY_UIApplicationSupportsIndirectInputEvents = YES



// Launch Screen Interface File Base Name
// 
// The filename of the storyboard from which to generate the app’s launch image.

INFOPLIST_KEY_UILaunchStoryboardName = LaunchScreen



// Supported Interface Orientations
// 
// The interface orientations supported by your app.

INFOPLIST_KEY_UISupportedInterfaceOrientations = UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeRight UIInterfaceOrientationLandscapeLeft



// Supported Interface Orientations (iPad)
// 
// The interface orientations supported by your app.

INFOPLIST_KEY_UISupportedInterfaceOrientations_iPad = UIInterfaceOrientationPortrait UIInterfaceOrientationPortraitUpsideDown UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight



// Supported Interface Orientations (iPhone)
// 
// The interface orientations supported by your app.

INFOPLIST_KEY_UISupportedInterfaceOrientations_iPhone = UIInterfaceOrientationPortrait UIInterfaceOrientationLandscapeLeft UIInterfaceOrientationLandscapeRight



// User Interface Style
// 
// The user interface style for the app.

INFOPLIST_KEY_UIUserInterfaceStyle = Dark



// iOS Deployment Target
// 
// Code will load on this and later versions of iOS. Framework APIs that are unavailable
// in earlier versions will be weak-linked; your code should check for null function
// pointers or specific system versions before calling newer APIs.

IPHONEOS_DEPLOYMENT_TARGET = 14.0



// Runpath Search Paths
// 
// This is a list of paths to be added to the `runpath` search path list for the image
// being created. At runtime, `dyld` uses the `runpath` when searching for dylibs whose
// load path begins with `@rpath/`. See [Dynamic Library Programming
// Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).

LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks



// Product Bundle Identifier
// 
// A string that uniquely identifies the bundle. The string should be in reverse DNS
// format using only alphanumeric characters (`A-Z`, `a-z`, `0-9`), the dot (`.`), and
// the hyphen (`-`). This value is used as the `CFBundleIdentifier` in the `Info.plist`
// of the built bundle.

PRODUCT_BUNDLE_IDENTIFIER = com.mo.streamer.ios



// Product Name
// 
// This is the basename of the product generated by the target.

PRODUCT_NAME = Streamer



// Provisioning Profile
// 
// Must contain a profile name (or UUID). A missing or invalid profile will cause a build
// error. Use in conjunction with [DEVELOPMENT_TEAM] to fully specify provisioning
// profile.

PROVISIONING_PROFILE_SPECIFIER = 



// Base SDK
// 
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.

SDKROOT = iphoneos



SUPPORTS_MACCATALYST = NO



// Use Compiler to Extract Swift Strings
// 
// When enabled, the Swift compiler will be used to extract Swift string literal and
// interpolation `LocalizedStringKey` and `LocalizationKey` types during localization
// export.

SWIFT_EMIT_LOC_STRINGS = YES



// Swift Language Version
// 
// Interpret input according to a specific Swift language version number.

SWIFT_VERSION = 5.0



// Targeted Device Families
// 
// The build system uses the selected device to set the correct value for the
// `UIDeviceFamily` key it adds to the target's `Info.plist` file. This also drives the
// --target-device flag to actool, which determines the idioms selected during catalog
// compilation.

TARGETED_DEVICE_FAMILY = 1,2
